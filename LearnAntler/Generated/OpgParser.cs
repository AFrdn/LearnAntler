//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Opg.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class OpgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		FileOpenTag=1, FileCloseTag=2, HeaderOpenTag=3, HeaderCloseTag=4, HeaderExtOpenTag=5, 
		HeaderExtCloseTag=6, BodyOpenTag=7, BodyCloseTag=8, SectionOpenTag=9, 
		SectionCloseTag=10, HeaderContent=11, FloatingBodyTag=12, FileVersionTag=13, 
		FileVersionContent=14, WHITESPACE=15, NUMBER=16;
	public const int
		RULE_file = 0, RULE_fileContent = 1, RULE_legacySection = 2, RULE_additionalSection = 3, 
		RULE_header = 4, RULE_headerExt = 5, RULE_body = 6, RULE_headerContent = 7, 
		RULE_fileVersion = 8;
	public static readonly string[] ruleNames = {
		"file", "fileContent", "legacySection", "additionalSection", "header", 
		"headerExt", "body", "headerContent", "fileVersion"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<opimrtascii>'", "'</opimrtascii>'", "'<asciiheader>'", "'</asciiheader>'", 
		"'<asciiheaderext>'", "'</asciiheaderext>'", "'<body>'", "'</body>'", 
		null, "'</section>'", "'temp'", "'temp2'", "'File Version:'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "FileOpenTag", "FileCloseTag", "HeaderOpenTag", "HeaderCloseTag", 
		"HeaderExtOpenTag", "HeaderExtCloseTag", "BodyOpenTag", "BodyCloseTag", 
		"SectionOpenTag", "SectionCloseTag", "HeaderContent", "FloatingBodyTag", 
		"FileVersionTag", "FileVersionContent", "WHITESPACE", "NUMBER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Opg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OpgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OpgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OpgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public ITerminalNode FileOpenTag() { return GetToken(OpgParser.FileOpenTag, 0); }
		public FileContentContext fileContent() {
			return GetRuleContext<FileContentContext>(0);
		}
		public ITerminalNode FileCloseTag() { return GetToken(OpgParser.FileCloseTag, 0); }
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; Match(FileOpenTag);
			State = 19; fileContent();
			State = 20; Match(FileCloseTag);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileContentContext : ParserRuleContext {
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public HeaderExtContext headerExt() {
			return GetRuleContext<HeaderExtContext>(0);
		}
		public AdditionalSectionContext[] additionalSection() {
			return GetRuleContexts<AdditionalSectionContext>();
		}
		public AdditionalSectionContext additionalSection(int i) {
			return GetRuleContext<AdditionalSectionContext>(i);
		}
		public FileContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContentContext fileContent() {
		FileContentContext _localctx = new FileContentContext(Context, State);
		EnterRule(_localctx, 2, RULE_fileContent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; header();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==HeaderExtOpenTag) {
				{
				State = 23; headerExt();
				}
			}

			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SectionOpenTag) {
				{
				{
				State = 26; additionalSection();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32; body();
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SectionOpenTag) {
				{
				{
				State = 33; additionalSection();
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LegacySectionContext : ParserRuleContext {
		public HeaderContext header() {
			return GetRuleContext<HeaderContext>(0);
		}
		public HeaderExtContext headerExt() {
			return GetRuleContext<HeaderExtContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public LegacySectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_legacySection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLegacySection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LegacySectionContext legacySection() {
		LegacySectionContext _localctx = new LegacySectionContext(Context, State);
		EnterRule(_localctx, 4, RULE_legacySection);
		try {
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HeaderOpenTag:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39; header();
				}
				break;
			case HeaderExtOpenTag:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40; headerExt();
				}
				break;
			case BodyOpenTag:
			case FloatingBodyTag:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41; body();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditionalSectionContext : ParserRuleContext {
		public ITerminalNode SectionOpenTag() { return GetToken(OpgParser.SectionOpenTag, 0); }
		public ITerminalNode SectionCloseTag() { return GetToken(OpgParser.SectionCloseTag, 0); }
		public AdditionalSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additionalSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionalSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdditionalSectionContext additionalSection() {
		AdditionalSectionContext _localctx = new AdditionalSectionContext(Context, State);
		EnterRule(_localctx, 6, RULE_additionalSection);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(SectionOpenTag);
			State = 45; Match(SectionCloseTag);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContext : ParserRuleContext {
		public ITerminalNode HeaderOpenTag() { return GetToken(OpgParser.HeaderOpenTag, 0); }
		public HeaderContentContext headerContent() {
			return GetRuleContext<HeaderContentContext>(0);
		}
		public ITerminalNode HeaderCloseTag() { return GetToken(OpgParser.HeaderCloseTag, 0); }
		public HeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_header; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContext header() {
		HeaderContext _localctx = new HeaderContext(Context, State);
		EnterRule(_localctx, 8, RULE_header);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(HeaderOpenTag);
			State = 48; headerContent();
			State = 49; Match(HeaderCloseTag);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderExtContext : ParserRuleContext {
		public ITerminalNode HeaderExtOpenTag() { return GetToken(OpgParser.HeaderExtOpenTag, 0); }
		public ITerminalNode HeaderExtCloseTag() { return GetToken(OpgParser.HeaderExtCloseTag, 0); }
		public HeaderExtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerExt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderExt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderExtContext headerExt() {
		HeaderExtContext _localctx = new HeaderExtContext(Context, State);
		EnterRule(_localctx, 10, RULE_headerExt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(HeaderExtOpenTag);
			State = 52; Match(HeaderExtCloseTag);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public ITerminalNode BodyOpenTag() { return GetToken(OpgParser.BodyOpenTag, 0); }
		public ITerminalNode BodyCloseTag() { return GetToken(OpgParser.BodyCloseTag, 0); }
		public ITerminalNode[] FloatingBodyTag() { return GetTokens(OpgParser.FloatingBodyTag); }
		public ITerminalNode FloatingBodyTag(int i) {
			return GetToken(OpgParser.FloatingBodyTag, i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 12, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FloatingBodyTag) {
				{
				{
				State = 54; Match(FloatingBodyTag);
				}
				}
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 60; Match(BodyOpenTag);
			State = 61; Match(BodyCloseTag);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HeaderContentContext : ParserRuleContext {
		public FileVersionContext fileVersion() {
			return GetRuleContext<FileVersionContext>(0);
		}
		public HeaderContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_headerContent; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeaderContent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HeaderContentContext headerContent() {
		HeaderContentContext _localctx = new HeaderContentContext(Context, State);
		EnterRule(_localctx, 14, RULE_headerContent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; fileVersion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileVersionContext : ParserRuleContext {
		public ITerminalNode FileVersionTag() { return GetToken(OpgParser.FileVersionTag, 0); }
		public ITerminalNode FileVersionContent() { return GetToken(OpgParser.FileVersionContent, 0); }
		public FileVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileVersion; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOpgVisitor<TResult> typedVisitor = visitor as IOpgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileVersion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileVersionContext fileVersion() {
		FileVersionContext _localctx = new FileVersionContext(Context, State);
		EnterRule(_localctx, 16, RULE_fileVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; Match(FileVersionTag);
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FileVersionContent) {
				{
				State = 66; Match(FileVersionContent);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x12', 'H', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1B', '\n', '\x3', '\x3', '\x3', '\a', '\x3', '\x1E', '\n', '\x3', 
		'\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\a', '\x3', '%', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '(', '\v', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\a', '\b', ':', '\n', '\b', '\f', '\b', '\xE', '\b', '=', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\x46', '\n', '\n', '\x3', '\n', 
		'\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x2', '\x2', '\x2', '\x45', '\x2', '\x14', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x18', '\x3', '\x2', '\x2', '\x2', '\x6', ',', '\x3', '\x2', 
		'\x2', '\x2', '\b', '.', '\x3', '\x2', '\x2', '\x2', '\n', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x35', '\x3', '\x2', '\x2', '\x2', '\xE', 
		';', '\x3', '\x2', '\x2', '\x2', '\x10', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x43', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\a', 
		'\x3', '\x2', '\x2', '\x15', '\x16', '\x5', '\x4', '\x3', '\x2', '\x16', 
		'\x17', '\a', '\x4', '\x2', '\x2', '\x17', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x1A', '\x5', '\n', '\x6', '\x2', '\x19', '\x1B', '\x5', 
		'\f', '\a', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '&', '\x5', '\xE', '\b', '\x2', '#', '%', '\x5', '\b', 
		'\x5', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', 
		'\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '\x5', '\x3', '\x2', '\x2', '\x2', '(', '&', 
		'\x3', '\x2', '\x2', '\x2', ')', '-', '\x5', '\n', '\x6', '\x2', '*', 
		'-', '\x5', '\f', '\a', '\x2', '+', '-', '\x5', '\xE', '\b', '\x2', ',', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', '-', '\a', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\a', '\v', '\x2', '\x2', '/', '\x30', '\a', '\f', '\x2', 
		'\x2', '\x30', '\t', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x5', '\x2', '\x2', '\x32', '\x33', '\x5', '\x10', '\t', '\x2', '\x33', 
		'\x34', '\a', '\x6', '\x2', '\x2', '\x34', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\a', '\x2', '\x2', '\x36', '\x37', '\a', 
		'\b', '\x2', '\x2', '\x37', '\r', '\x3', '\x2', '\x2', '\x2', '\x38', 
		':', '\a', '\xE', '\x2', '\x2', '\x39', '\x38', '\x3', '\x2', '\x2', '\x2', 
		':', '=', '\x3', '\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', 
		'\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\t', '\x2', 
		'\x2', '?', '@', '\a', '\n', '\x2', '\x2', '@', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x5', '\x12', '\n', '\x2', '\x42', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x45', '\a', '\xF', '\x2', '\x2', '\x44', 
		'\x46', '\a', '\x10', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', '\x46', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x1A', '\x1F', '&', ',', ';', '\x45',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
